package org.ri.se.vt.contract;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.11.
 */
@SuppressWarnings("rawtypes")
public class SCTraceability extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50611590806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063bc60f6a11161005b578063bc60f6a114610100578063e724c71b14610134578063ebfec6b714610164578063fac333ac146101825761007d565b8063626d10bd14610082578063817cc1ea146100b257806381d18764146100d0575b600080fd5b61009c60048036036100979190810190610f28565b6101b2565b6040516100a99190611315565b60405180910390f35b6100ba6106f1565b6040516100c79190611394565b60405180910390f35b6100ea60048036036100e59190810190610ee7565b6106fe565b6040516100f79190611394565b60405180910390f35b61011a60048036036101159190810190610fff565b61072b565b60405161012b95949392919061128b565b60405180910390f35b61014e60048036036101499190810190611053565b610a8e565b60405161015b9190611352565b60405180910390f35b61016c610b47565b60405161017991906112f3565b60405180910390f35b61019c60048036036101979190810190611053565b610c30565b6040516101a99190611330565b60405180910390f35b6000806000876040516101c59190611274565b9081526020016040518091039020905060008160000180549050141561022b57600180889080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190610223929190610ce9565b50505061056d565b610233610d69565b8160000160018360000180549050038154811061024c57fe5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156103aa5780601f1061037f576101008083540402835291602001916103aa565b820191906000526020600020905b81548152906001019060200180831161038d57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561044c5780601f106104215761010080835404028352916020019161044c565b820191906000526020600020905b81548152906001019060200180831161042f57829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156104ee5780601f106104c3576101008083540402835291602001916104ee565b820191906000526020600020905b8154815290600101906020018083116104d157829003601f168201915b50505050508152505090503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff161461056b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056290611374565b60405180910390fd5b505b610575610d69565b6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186815260200185815250905081600001819080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020190805190602001906106a4929190610dc4565b5060608201518160030190805190602001906106c1929190610dc4565b5060808201518160040190805190602001906106de929190610dc4565b5050505060019250505095945050505050565b6000600180549050905090565b6000808260405161070f9190611274565b9081526020016040518091039020600001805490509050919050565b60008060608060606000876040516107439190611274565b9081526020016040518091039020600001868154811061075f57fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000886040516107a19190611274565b908152602001604051809103902060000187815481106107bd57fe5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000896040516107ff9190611274565b9081526020016040518091039020600001888154811061081b57fe5b906000526020600020906005020160020160008a60405161083c9190611274565b9081526020016040518091039020600001898154811061085857fe5b906000526020600020906005020160030160008b6040516108799190611274565b90815260200160405180910390206000018a8154811061089557fe5b9060005260206000209060050201600401828054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561093b5780601f106109105761010080835404028352916020019161093b565b820191906000526020600020905b81548152906001019060200180831161091e57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156109d75780601f106109ac576101008083540402835291602001916109d7565b820191906000526020600020905b8154815290600101906020018083116109ba57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a735780601f10610a4857610100808354040283529160200191610a73565b820191906000526020600020905b815481529060010190602001808311610a5657829003601f168201915b50505050509050945094509450945094509295509295909350565b606060018281548110610a9d57fe5b906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b3b5780601f10610b1057610100808354040283529160200191610b3b565b820191906000526020600020905b815481529060010190602001808311610b1e57829003601f168201915b50505050509050919050565b60606001805480602002602001604051908101604052809291908181526020016000905b82821015610c27578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c135780601f10610be857610100808354040283529160200191610c13565b820191906000526020600020905b815481529060010190602001808311610bf657829003601f168201915b505050505081526020019060010190610b6b565b50505050905090565b60018181548110610c3d57fe5b906000526020600020016000915090508054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ce15780601f10610cb657610100808354040283529160200191610ce1565b820191906000526020600020905b815481529060010190602001808311610cc457829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610d2a57805160ff1916838001178555610d58565b82800160010185558215610d58579182015b82811115610d57578251825591602001919060010190610d3c565b5b509050610d659190610e44565b5090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610e0557805160ff1916838001178555610e33565b82800160010185558215610e33579182015b82811115610e32578251825591602001919060010190610e17565b5b509050610e409190610e44565b5090565b610e6691905b80821115610e62576000816000905550600101610e4a565b5090565b90565b600081359050610e788161151f565b92915050565b600082601f830112610e8f57600080fd5b8135610ea2610e9d826113dc565b6113af565b91508082526020830160208301858383011115610ebe57600080fd5b610ec98382846114cc565b50505092915050565b600081359050610ee181611536565b92915050565b600060208284031215610ef957600080fd5b600082013567ffffffffffffffff811115610f1357600080fd5b610f1f84828501610e7e565b91505092915050565b600080600080600060a08688031215610f4057600080fd5b600086013567ffffffffffffffff811115610f5a57600080fd5b610f6688828901610e7e565b9550506020610f7788828901610e69565b945050604086013567ffffffffffffffff811115610f9457600080fd5b610fa088828901610e7e565b935050606086013567ffffffffffffffff811115610fbd57600080fd5b610fc988828901610e7e565b925050608086013567ffffffffffffffff811115610fe657600080fd5b610ff288828901610e7e565b9150509295509295909350565b6000806040838503121561101257600080fd5b600083013567ffffffffffffffff81111561102c57600080fd5b61103885828601610e7e565b925050602061104985828601610ed2565b9150509250929050565b60006020828403121561106557600080fd5b600061107384828501610ed2565b91505092915050565b6000611088838361118d565b905092915050565b61109981611484565b82525050565b60006110aa82611418565b6110b48185611446565b9350836020820285016110c685611408565b8060005b8581101561110257848403895281516110e3858261107c565b94506110ee83611439565b925060208a019950506001810190506110ca565b50829750879550505050505092915050565b61111d81611496565b82525050565b600061112e8261142e565b6111388185611468565b93506111488185602086016114db565b6111518161150e565b840191505092915050565b60006111678261142e565b6111718185611479565b93506111818185602086016114db565b80840191505092915050565b600061119882611423565b6111a28185611457565b93506111b28185602086016114db565b6111bb8161150e565b840191505092915050565b60006111d182611423565b6111db8185611468565b93506111eb8185602086016114db565b6111f48161150e565b840191505092915050565b600061120c602a83611468565b91507f596f7520617265206e6f7420746865206f776e6572206f66207468652074726160008301527f6e73616374696f6e2021000000000000000000000000000000000000000000006020830152604082019050919050565b61126e816114c2565b82525050565b6000611280828461115c565b915081905092915050565b600060a0820190506112a06000830188611090565b6112ad6020830187611090565b81810360408301526112bf8186611123565b905081810360608301526112d38185611123565b905081810360808301526112e78184611123565b90509695505050505050565b6000602082019050818103600083015261130d818461109f565b905092915050565b600060208201905061132a6000830184611114565b92915050565b6000602082019050818103600083015261134a81846111c6565b905092915050565b6000602082019050818103600083015261136c8184611123565b905092915050565b6000602082019050818103600083015261138d816111ff565b9050919050565b60006020820190506113a96000830184611265565b92915050565b6000604051905081810181811067ffffffffffffffff821117156113d257600080fd5b8060405250919050565b600067ffffffffffffffff8211156113f357600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061148f826114a2565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b838110156114f95780820151818401526020810190506114de565b83811115611508576000848401525b50505050565b6000601f19601f8301169050919050565b61152881611484565b811461153357600080fd5b50565b61153f816114c2565b811461154a57600080fd5b5056fea365627a7a72315820d7bfef248a6372e4d5d9f16b684c1b4c1190995d8c662053a37ca4d193e187fc6c6578706572696d656e74616cf564736f6c634300050c0040";

    public static final String FUNC_IDS = "ids";

    public static final String FUNC_SETRECORD = "setRecord";

    public static final String FUNC_GETRECORD = "getRecord";

    public static final String FUNC_GETRECORDCOUNTSBYID = "getRecordCountsById";

    public static final String FUNC_COUNTS = "counts";

    public static final String FUNC_GETIDSTRING = "getIdString";

    public static final String FUNC_GETIDARRAY = "getIdArray";

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected SCTraceability(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SCTraceability(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SCTraceability(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SCTraceability(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<String> ids(BigInteger param0) {
        final Function function = new Function(FUNC_IDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setRecord(String _id, String _receiver, String _data, String _parents, String _other) {
        final Function function = new Function(
                FUNC_SETRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.Address(_receiver), 
                new org.web3j.abi.datatypes.Utf8String(_data), 
                new org.web3j.abi.datatypes.Utf8String(_parents), 
                new org.web3j.abi.datatypes.Utf8String(_other)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, String, String>> getRecord(String _id, BigInteger _no) {
        final Function function = new Function(FUNC_GETRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, String, String>>(function,
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getRecordCountsById(String _id) {
        final Function function = new Function(FUNC_GETRECORDCOUNTSBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> counts() {
        final Function function = new Function(FUNC_COUNTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getIdString(BigInteger _no) {
        final Function function = new Function(FUNC_GETIDSTRING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<List> getIdArray() {
        final Function function = new Function(FUNC_GETIDARRAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    @Deprecated
    public static SCTraceability load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SCTraceability(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SCTraceability load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SCTraceability(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SCTraceability load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SCTraceability(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SCTraceability load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SCTraceability(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SCTraceability> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SCTraceability.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SCTraceability> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SCTraceability.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SCTraceability> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SCTraceability.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SCTraceability> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SCTraceability.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }
}
