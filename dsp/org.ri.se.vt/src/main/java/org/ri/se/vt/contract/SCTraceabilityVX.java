package org.ri.se.vt.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class SCTraceabilityVX extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b50612c3b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a85760003560e01c8063c3ae6f4711610071578063c3ae6f4714610639578063d5cf226d146108ab578063e618faac14610a35578063e724c71b14610ccd578063f96996e414610d74578063fac333ac14610e43576100a8565b8062340339146100ad5780634f74bf9d14610237578063817cc1ea146103065780638f5f42c6146103245780639976c8a0146104c8575b600080fd5b61021d600480360360608110156100c357600080fd5b81019080803590602001906401000000008111156100e057600080fd5b8201836020820111156100f257600080fd5b8035906020019184600183028401116401000000008311171561011457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561019757600080fd5b8201836020820111156101a957600080fd5b803590602001918460018302840111640100000000831117156101cb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610eea565b604051808215151515815260200191505060405180910390f35b6102f06004803603602081101561024d57600080fd5b810190808035906020019064010000000081111561026a57600080fd5b82018360208201111561027c57600080fd5b8035906020019184600183028401116401000000008311171561029e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192905050506112e0565b6040518082815260200191505060405180910390f35b61030e611359565b6040518082815260200191505060405180910390f35b6103e76004803603604081101561033a57600080fd5b810190808035906020019064010000000081111561035757600080fd5b82018360208201111561036957600080fd5b8035906020019184600183028401116401000000008311171561038b57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050611366565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561048b578082015181840152602081019050610470565b50505050905090810190601f1680156104b85780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b61058b600480360360408110156104de57600080fd5b81019080803590602001906401000000008111156104fb57600080fd5b82018360208201111561050d57600080fd5b8035906020019184600183028401116401000000008311171561052f57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506115ee565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156105fd5780820151818401526020810190506105e2565b50505050905090810190601f16801561062a5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b6106f26004803603602081101561064f57600080fd5b810190808035906020019064010000000081111561066c57600080fd5b82018360208201111561067e57600080fd5b803590602001918460018302840111640100000000831117156106a057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611897565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561079e578082015181840152602081019050610783565b50505050905090810190601f1680156107cb5780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156108045780820151818401526020810190506107e9565b50505050905090810190601f1680156108315780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561086a57808201518184015260208101905061084f565b50505050905090810190601f1680156108975780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b610a1b600480360360608110156108c157600080fd5b81019080803590602001906401000000008111156108de57600080fd5b8201836020820111156108f057600080fd5b8035906020019184600183028401116401000000008311171561091257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561099557600080fd5b8201836020820111156109a757600080fd5b803590602001918460018302840111640100000000831117156109c957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611d3b565b604051808215151515815260200191505060405180910390f35b610cb360048036036080811015610a4b57600080fd5b8101908080359060200190640100000000811115610a6857600080fd5b820183602082011115610a7a57600080fd5b80359060200191846001830284011164010000000083111715610a9c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610aff57600080fd5b820183602082011115610b1157600080fd5b80359060200191846001830284011164010000000083111715610b3357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610b9657600080fd5b820183602082011115610ba857600080fd5b80359060200191846001830284011164010000000083111715610bca57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610c2d57600080fd5b820183602082011115610c3f57600080fd5b80359060200191846001830284011164010000000083111715610c6157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612310565b604051808215151515815260200191505060405180910390f35b610cf960048036036020811015610ce357600080fd5b810190808035906020019092919050505061278b565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d39578082015181840152602081019050610d1e565b50505050905090810190601f168015610d665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610e2d60048036036020811015610d8a57600080fd5b8101908080359060200190640100000000811115610da757600080fd5b820183602082011115610db957600080fd5b80359060200191846001830284011164010000000083111715610ddb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050612844565b6040518082815260200191505060405180910390f35b610e6f60048036036020811015610e5957600080fd5b81019080803590602001909291905050506128bc565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610eaf578082015181840152602081019050610e94565b50505050905090810190601f168015610edc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6000806002856040518082805190602001908083835b60208310610f235780518252602082019150602081019050602083039250610f00565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000180549050905060008111610fb8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180612b9f6033913960400191505060405180910390fd5b610fc0612975565b6002866040518082805190602001908083835b60208310610ff65780518252602082019150602081019050602083039250610fd3565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001600183038154811061103a57fe5b90600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111425780601f1061111757610100808354040283529160200191611142565b820191906000526020600020905b81548152906001019060200180831161112557829003601f168201915b50505050508152505090508473ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff16146111d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612b18602e913960400191505060405180910390fd5b600081602001515114611233576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612b70602f913960400191505060405180910390fd5b836002876040518082805190602001908083835b6020831061126a5780518252602082019150602081019050602083039250611247565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160018403815481106112ae57fe5b906000526020600020906002020160010190805190602001906112d29291906129a5565b506001925050509392505050565b60006002826040518082805190602001908083835b6020831061131857805182526020820191506020810190506020830392506112f5565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001805490509050919050565b6000600180549050905090565b60008060606000856040518082805190602001908083835b602083106113a1578051825260208201915060208101905060208303925061137e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000184815481106113e257fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000866040518082805190602001908083835b6020831061144a5780518252602082019150602081019050602083039250611427565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001858154811061148b57fe5b906000526020600020906003020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000876040518082805190602001908083835b602083106114f357805182526020820191506020810190506020830392506114d0565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001868154811061153457fe5b9060005260206000209060030201600201808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115da5780601f106115af576101008083540402835291602001916115da565b820191906000526020600020905b8154815290600101906020018083116115bd57829003601f168201915b505050505090509250925092509250925092565b6000606060006002856040518082805190602001908083835b6020831061162a5780518252602082019150602081019050602083039250611607565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054905090508381116116be576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526033815260200180612b9f6033913960400191505060405180910390fd5b6002856040518082805190602001908083835b602083106116f457805182526020820191506020810190506020830392506116d1565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001848154811061173557fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002866040518082805190602001908083835b6020831061179d578051825260208201915060208101905060208303925061177a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000185815481106117de57fe5b9060005260206000209060020201600101808054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118845780601f1061185957610100808354040283529160200191611884565b820191906000526020600020905b81548152906001019060200180831161186757829003601f168201915b5050505050905092509250509250929050565b60008060608060606000866040518082805190602001908083835b602083106118d557805182526020820191506020810190506020830392506118b2565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160008154811061191757fe5b906000526020600020906003020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000876040518082805190602001908083835b6020831061197f578051825260208201915060208101905060208303925061195c565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000016000815481106119c157fe5b906000526020600020906003020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000886040518082805190602001908083835b60208310611a295780518252602082019150602081019050602083039250611a06565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001600081548110611a6b57fe5b90600052602060002090600302016002016000896040518082805190602001908083835b60208310611ab25780518252602082019150602081019050602083039250611a8f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160008a6040518082805190602001908083835b60208310611b1e5780518252602082019150602081019050602083039250611afb565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600201828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611be95780601f10611bbe57610100808354040283529160200191611be9565b820191906000526020600020905b815481529060010190602001808311611bcc57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611c855780601f10611c5a57610100808354040283529160200191611c85565b820191906000526020600020905b815481529060010190602001808311611c6857829003601f168201915b50505050509150808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611d215780601f10611cf657610100808354040283529160200191611d21565b820191906000526020600020905b815481529060010190602001808311611d0457829003601f168201915b505050505090509450945094509450945091939590929450565b6000806000856040518082805190602001908083835b60208310611d745780518252602082019150602081019050602083039250611d51565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209050600081600001805490501415611dc3576000915050612309565b611dcb612a25565b81600001600183600001805490500381548110611de457fe5b90600052602060002090600302016040518060600160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611f425780601f10611f1757610100808354040283529160200191611f42565b820191906000526020600020905b815481529060010190602001808311611f2557829003601f168201915b50505050508152505090503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614611fd5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612b46602a913960400191505060405180910390fd5b611fdd612a25565b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff16815260200186815250905082600001819080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019080519060200190612100929190612a72565b5050505060006002886040518082805190602001908083835b6020831061213c5780518252602082019150602081019050602083039250612119565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209050612179612975565b60405180604001604052808973ffffffffffffffffffffffffffffffffffffffff16815260200160405180602001604052806000815250815250905081600001819080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001019080519060200190612248929190612a72565b505050503373ffffffffffffffffffffffffffffffffffffffff167f68a331f033c1e5ce4f6a0fc484b20cb8368bf28a77b6468a762241c0fc202d678a6040518080602001828103825283818151815260200191508051906020019080838360005b838110156122c55780820151818401526020810190506122aa565b50505050905090810190601f1680156122f25780820380516001836020036101000a031916815260200191505b509250505060405180910390a26001955050505050505b9392505050565b6000806000866040518082805190602001908083835b602083106123495780518252602082019150602081019050602083039250612326565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020905060008160000180549050146123de576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526035815260200180612bd26035913960400191505060405180910390fd5b60018087908060018154018082558091505090600182039060005260206000200160009091929091909150908051906020019061241c9291906129a5565b505050612427612a25565b60405180606001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200187815250905081600001819080600181540180825580915050906001820390600052602060002090600302016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019061254a929190612a72565b50505050848260010190805190602001906125669291906129a5565b508382600201908051906020019061257f9291906129a5565b5060006002886040518082805190602001908083835b602083106125b85780518252602082019150602081019050602083039250612595565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090506125f5612975565b60405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200160405180602001604052806000815250815250905081600001819080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010190805190602001906126c4929190612a72565b505050503373ffffffffffffffffffffffffffffffffffffffff167f68a331f033c1e5ce4f6a0fc484b20cb8368bf28a77b6468a762241c0fc202d678a6040518080602001828103825283818151815260200191508051906020019080838360005b83811015612741578082015181840152602081019050612726565b50505050905090810190601f16801561276e5780820380516001836020036101000a031916815260200191505b509250505060405180910390a26001945050505050949350505050565b60606001828154811061279a57fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128385780601f1061280d57610100808354040283529160200191612838565b820191906000526020600020905b81548152906001019060200180831161281b57829003601f168201915b50505050509050919050565b600080826040518082805190602001908083835b6020831061287b5780518252602082019150602081019050602083039250612858565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001805490509050919050565b600181815481106128c957fe5b906000526020600020016000915090508054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561296d5780601f106129425761010080835404028352916020019161296d565b820191906000526020600020905b81548152906001019060200180831161295057829003601f168201915b505050505081565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106129e657805160ff1916838001178555612a14565b82800160010185558215612a14579182015b82811115612a135782518255916020019190600101906129f8565b5b509050612a219190612af2565b5090565b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612ab357805160ff1916838001178555612ae1565b82800160010185558215612ae1579182015b82811115612ae0578251825591602001919060010190612ac5565b5b509050612aee9190612af2565b5090565b612b1491905b80821115612b10576000816000905550600101612af8565b5090565b9056fe526563697069656e74206f662074686520746865207472616e73616374696f6e206973206e6f742073616d652021596f7520617265206e6f7420746865206f776e6572206f6620746865207472616e73616374696f6e202154726173616374696f6e20776974682073616d6520686173682076616c756520616c726561647920657869737420215472616e73616374696f6e20616761696e737420676976656e206964656e7469747920646f6573206e6f7420657869737420215472616e73616374696f6e20776974682073616d65206974656d206e616d65202869642920616c7265616479206578697374732021a265627a7a72315820a1e5763b4d173d649521e6a20ae314da204d28e8a5549a7bdbafbba8a545301c64736f6c63430005100032";

    public static final String FUNC_IDS = "ids";

    public static final String FUNC_NEWTRANSACTION = "newTransaction";

    public static final String FUNC_APPENDTRANSACTION = "appendTransaction";

    public static final String FUNC_FETCHBASETRANSACTION = "fetchBaseTransaction";

    public static final String FUNC_FETCHTRANSACTION = "fetchTransaction";

    public static final String FUNC_GETTRANSLINK = "getTransLink";

    public static final String FUNC_GETTRANSACTIONCOUNTSBYID = "getTransactionCountsById";

    public static final String FUNC_COUNTS = "counts";

    public static final String FUNC_GETIDSTRING = "getIdString";

    public static final String FUNC_GETOTALTRANSLINKBYID = "geTotalTransLinkById";

    public static final String FUNC_ADDTRANSLINK = "addTransLink";

    public static final Event DEPOSIT_EVENT = new Event("Deposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected SCTraceabilityVX(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SCTraceabilityVX(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SCTraceabilityVX(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SCTraceabilityVX(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DepositEventResponse> getDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEPOSIT_EVENT, transactionReceipt);
        ArrayList<DepositEventResponse> responses = new ArrayList<DepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DepositEventResponse typedResponse = new DepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._id = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DepositEventResponse> depositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DepositEventResponse>() {
            @Override
            public DepositEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DEPOSIT_EVENT, log);
                DepositEventResponse typedResponse = new DepositEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._id = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DepositEventResponse> depositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DEPOSIT_EVENT));
        return depositEventFlowable(filter);
    }

    public RemoteFunctionCall<String> ids(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_IDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> newTransaction(String _id, String _data, String _parents, String _other) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NEWTRANSACTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.Utf8String(_data), 
                new org.web3j.abi.datatypes.Utf8String(_parents), 
                new org.web3j.abi.datatypes.Utf8String(_other)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> appendTransaction(String _id, String _receiver, String _data) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_APPENDTRANSACTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.Address(_receiver), 
                new org.web3j.abi.datatypes.Utf8String(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, String, String>> fetchBaseTransaction(String _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FETCHBASETRANSACTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, String, String>>(function,
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple3<String, String, String>> fetchTransaction(String _id, BigInteger _no) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FETCHTRANSACTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple3<String, String, String>>(function,
                new Callable<Tuple3<String, String, String>>() {
                    @Override
                    public Tuple3<String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<String, String>> getTransLink(String _id, BigInteger _no) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTRANSLINK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<String, String>>(function,
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getTransactionCountsById(String _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTRANSACTIONCOUNTSBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> counts() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COUNTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getIdString(BigInteger _no) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETIDSTRING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> geTotalTransLinkById(String _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOTALTRANSLINKBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> addTransLink(String _id, String _receiver, String _tranHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTRANSLINK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.Address(_receiver), 
                new org.web3j.abi.datatypes.Utf8String(_tranHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SCTraceabilityVX load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SCTraceabilityVX(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SCTraceabilityVX load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SCTraceabilityVX(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SCTraceabilityVX load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SCTraceabilityVX(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SCTraceabilityVX load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SCTraceabilityVX(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SCTraceabilityVX> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SCTraceabilityVX.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SCTraceabilityVX> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SCTraceabilityVX.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SCTraceabilityVX> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SCTraceabilityVX.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SCTraceabilityVX> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SCTraceabilityVX.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class DepositEventResponse extends BaseEventResponse {
        public String _from;

        public String _id;
    }
}
