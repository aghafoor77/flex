package org.ri.se.vt.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class SCTraceabilityV2 extends Contract {
    public static final String BINARY = "0x608060405234801561001057600080fd5b506123f6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806381d187641161006657806381d18764146105ae578063bc60f6a11461067d578063dd4a8578146108f9578063e724c71b14610a83578063fac333ac14610b2a57610093565b806350a3cd3f14610098578063626d10bd146101675780636d39bc841461041f578063817cc1ea14610590575b600080fd5b610151600480360360208110156100ae57600080fd5b81019080803590602001906401000000008111156100cb57600080fd5b8201836020820111156100dd57600080fd5b803590602001918460018302840111640100000000831117156100ff57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610bd1565b6040518082815260200191505060405180910390f35b610405600480360360a081101561017d57600080fd5b810190808035906020019064010000000081111561019a57600080fd5b8201836020820111156101ac57600080fd5b803590602001918460018302840111640100000000831117156101ce57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561025157600080fd5b82018360208201111561026357600080fd5b8035906020019184600183028401116401000000008311171561028557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156102e857600080fd5b8201836020820111156102fa57600080fd5b8035906020019184600183028401116401000000008311171561031c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561037f57600080fd5b82018360208201111561039157600080fd5b803590602001918460018302840111640100000000831117156103b357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610c4a565b604051808215151515815260200191505060405180910390f35b6104e26004803603604081101561043557600080fd5b810190808035906020019064010000000081111561045257600080fd5b82018360208201111561046457600080fd5b8035906020019184600183028401116401000000008311171561048657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506113e7565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610554578082015181840152602081019050610539565b50505050905090810190601f1680156105815780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b610598611690565b6040518082815260200191505060405180910390f35b610667600480360360208110156105c457600080fd5b81019080803590602001906401000000008111156105e157600080fd5b8201836020820111156105f357600080fd5b8035906020019184600183028401116401000000008311171561061557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061169d565b6040518082815260200191505060405180910390f35b6107406004803603604081101561069357600080fd5b81019080803590602001906401000000008111156106b057600080fd5b8201836020820111156106c257600080fd5b803590602001918460018302840111640100000000831117156106e457600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050611715565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200180602001848103845287818151815260200191508051906020019080838360005b838110156107ec5780820151818401526020810190506107d1565b50505050905090810190601f1680156108195780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015610852578082015181840152602081019050610837565b50505050905090810190601f16801561087f5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156108b857808201518184015260208101905061089d565b50505050905090810190601f1680156108e55780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b610a696004803603606081101561090f57600080fd5b810190808035906020019064010000000081111561092c57600080fd5b82018360208201111561093e57600080fd5b8035906020019184600183028401116401000000008311171561096057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156109e357600080fd5b8201836020820111156109f557600080fd5b80359060200191846001830284011164010000000083111715610a1757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611bef565b604051808215151515815260200191505060405180910390f35b610aaf60048036036020811015610a9957600080fd5b8101908080359060200190929190505050611fe5565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610aef578082015181840152602081019050610ad4565b50505050905090810190601f168015610b1c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610b5660048036036020811015610b4057600080fd5b810190808035906020019092919050505061209e565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b96578082015181840152602081019050610b7b565b50505050905090810190601f168015610bc35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b60006002826040518082805190602001908083835b60208310610c095780518252602082019150602081019050602083039250610be6565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001805490509050919050565b6000806000876040518082805190602001908083835b60208310610c835780518252602082019150602081019050602083039250610c60565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209050600081600001805490501415610d0e57600180889080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190610d06929190612157565b505050611066565b610d166121d7565b81600001600183600001805490500381548110610d2f57fe5b90600052602060002090600502016040518060a00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e8d5780601f10610e6257610100808354040283529160200191610e8d565b820191906000526020600020905b815481529060010190602001808311610e7057829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f2f5780601f10610f0457610100808354040283529160200191610f2f565b820191906000526020600020905b815481529060010190602001808311610f1257829003601f168201915b50505050508152602001600482018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fd15780601f10610fa657610100808354040283529160200191610fd1565b820191906000526020600020905b815481529060010190602001808311610fb457829003601f168201915b50505050508152505090503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614611064576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612336602a913960400191505060405180910390fd5b505b61106e6121d7565b6040518060a001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff16815260200187815260200186815260200185815250905081600001819080600181540180825580915050906001820390600052602060002090600502016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201908051906020019061119d929190612232565b5060608201518160030190805190602001906111ba929190612232565b5060808201518160040190805190602001906111d7929190612232565b5050505060006002896040518082805190602001908083835b6020831061121357805182526020820191506020810190506020830392506111f0565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902090506112506122b2565b60405180604001604052808a73ffffffffffffffffffffffffffffffffffffffff16815260200160405180602001604052806000815250815250905081600001819080600181540180825580915050906001820390600052602060002090600202016000909192909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101908051906020019061131f929190612232565b505050503373ffffffffffffffffffffffffffffffffffffffff167f45bf9403dc2f64417bee1c3eee45c165c53296504e2d4f3cd0386939ab81f4028b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561139c578082015181840152602081019050611381565b50505050905090810190601f1680156113c95780820380516001836020036101000a031916815260200191505b509250505060405180910390a2600194505050505095945050505050565b6000606060006002856040518082805190602001908083835b602083106114235780518252602082019150602081019050602083039250611400565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018054905090508381116114b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603381526020018061238f6033913960400191505060405180910390fd5b6002856040518082805190602001908083835b602083106114ed57805182526020820191506020810190506020830392506114ca565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001848154811061152e57fe5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002866040518082805190602001908083835b602083106115965780518252602082019150602081019050602083039250611573565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000185815481106115d757fe5b9060005260206000209060020201600101808054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561167d5780601f106116525761010080835404028352916020019161167d565b820191906000526020600020905b81548152906001019060200180831161166057829003601f168201915b5050505050905092509250509250929050565b6000600180549050905090565b600080826040518082805190602001908083835b602083106116d457805182526020820191506020810190506020830392506116b1565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001805490509050919050565b60008060608060606000876040518082805190602001908083835b602083106117535780518252602082019150602081019050602083039250611730565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001868154811061179457fe5b906000526020600020906005020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000886040518082805190602001908083835b602083106117fc57805182526020820191506020810190506020830392506117d9565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001878154811061183d57fe5b906000526020600020906005020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000896040518082805190602001908083835b602083106118a55780518252602082019150602081019050602083039250611882565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000188815481106118e657fe5b906000526020600020906005020160020160008a6040518082805190602001908083835b6020831061192d578051825260208201915060208101905060208303925061190a565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001898154811061196e57fe5b906000526020600020906005020160030160008b6040518082805190602001908083835b602083106119b55780518252602082019150602081019050602083039250611992565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018a815481106119f657fe5b9060005260206000209060050201600401828054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a9c5780601f10611a7157610100808354040283529160200191611a9c565b820191906000526020600020905b815481529060010190602001808311611a7f57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b385780601f10611b0d57610100808354040283529160200191611b38565b820191906000526020600020905b815481529060010190602001808311611b1b57829003601f168201915b50505050509150808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bd45780601f10611ba957610100808354040283529160200191611bd4565b820191906000526020600020905b815481529060010190602001808311611bb757829003601f168201915b50505050509050945094509450945094509295509295909350565b6000806002856040518082805190602001908083835b60208310611c285780518252602082019150602081019050602083039250611c05565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000180549050905060008111611cbd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603381526020018061238f6033913960400191505060405180910390fd5b611cc56122b2565b6002866040518082805190602001908083835b60208310611cfb5780518252602082019150602081019050602083039250611cd8565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000016001830381548110611d3f57fe5b90600052602060002090600202016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e475780601f10611e1c57610100808354040283529160200191611e47565b820191906000526020600020905b815481529060010190602001808311611e2a57829003601f168201915b50505050508152505090508473ffffffffffffffffffffffffffffffffffffffff16816000015173ffffffffffffffffffffffffffffffffffffffff1614611eda576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180612308602e913960400191505060405180910390fd5b600081602001515114611f38576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612360602f913960400191505060405180910390fd5b836002876040518082805190602001908083835b60208310611f6f5780518252602082019150602081019050602083039250611f4c565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000016001840381548110611fb357fe5b90600052602060002090600202016001019080519060200190611fd7929190612157565b506001925050509392505050565b606060018281548110611ff457fe5b906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156120925780601f1061206757610100808354040283529160200191612092565b820191906000526020600020905b81548152906001019060200180831161207557829003601f168201915b50505050509050919050565b600181815481106120ab57fe5b906000526020600020016000915090508054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561214f5780601f106121245761010080835404028352916020019161214f565b820191906000526020600020905b81548152906001019060200180831161213257829003601f168201915b505050505081565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061219857805160ff19168380011785556121c6565b828001600101855582156121c6579182015b828111156121c55782518255916020019190600101906121aa565b5b5090506121d391906122e2565b5090565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160608152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061227357805160ff19168380011785556122a1565b828001600101855582156122a1579182015b828111156122a0578251825591602001919060010190612285565b5b5090506122ae91906122e2565b5090565b6040518060400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b61230491905b808211156123005760008160009055506001016122e8565b5090565b9056fe526563697069656e74206f662074686520746865207472616e73616374696f6e206973206e6f742073616d652021596f7520617265206e6f7420746865206f776e6572206f6620746865207472616e73616374696f6e202154726173616374696f6e20776974682073616d6520686173682076616c756520616c726561647920657869737420215472616e73616374696f6e20616761696e737420676976656e206964656e7469747920646f6573206e6f742065786973742021a265627a7a723158207d1499ea7aa4126315428c50c8257560fae70d205a13c811a6977626a40b4e2464736f6c63430005100032";

    public static final String FUNC_IDS = "ids";

    public static final String FUNC_SETRECORD = "setRecord";

    public static final String FUNC_GETRECORD = "getRecord";

    public static final String FUNC_GETTRANSATION = "getTransation";

    public static final String FUNC_GETRECORDCOUNTSBYID = "getRecordCountsById";

    public static final String FUNC_COUNTS = "counts";

    public static final String FUNC_GETIDSTRING = "getIdString";

    public static final String FUNC_GETOTALTRANSACTIONBYID = "geTotalTransactionById";

    public static final String FUNC_SETTRANSACTION = "setTransaction";

    public static final Event TRANSACTIONEVENT_EVENT = new Event("TransactionEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected SCTraceabilityV2(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SCTraceabilityV2(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SCTraceabilityV2(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SCTraceabilityV2(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<TransactionEventEventResponse> getTransactionEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSACTIONEVENT_EVENT, transactionReceipt);
        ArrayList<TransactionEventEventResponse> responses = new ArrayList<TransactionEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransactionEventEventResponse typedResponse = new TransactionEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._id = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransactionEventEventResponse> transactionEventEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransactionEventEventResponse>() {
            @Override
            public TransactionEventEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSACTIONEVENT_EVENT, log);
                TransactionEventEventResponse typedResponse = new TransactionEventEventResponse();
                typedResponse.log = log;
                typedResponse._from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._id = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransactionEventEventResponse> transactionEventEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSACTIONEVENT_EVENT));
        return transactionEventEventFlowable(filter);
    }

    public RemoteFunctionCall<String> ids(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_IDS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setRecord(String _id, String _receiver, String _data, String _parents, String _other) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.Address(_receiver), 
                new org.web3j.abi.datatypes.Utf8String(_data), 
                new org.web3j.abi.datatypes.Utf8String(_parents), 
                new org.web3j.abi.datatypes.Utf8String(_other)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple5<String, String, String, String, String>> getRecord(String _id, BigInteger _no) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETRECORD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple5<String, String, String, String, String>>(function,
                new Callable<Tuple5<String, String, String, String, String>>() {
                    @Override
                    public Tuple5<String, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, String, String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<String, String>> getTransation(String _id, BigInteger _no) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTRANSATION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.generated.Uint256(_no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple2<String, String>>(function,
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getRecordCountsById(String _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETRECORDCOUNTSBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> counts() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COUNTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> getIdString(BigInteger _no) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETIDSTRING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_no)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> geTotalTransactionById(String _id) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOTALTRANSACTIONBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setTransaction(String _id, String _receiver, String _tranHash) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTRANSACTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_id), 
                new org.web3j.abi.datatypes.Address(_receiver), 
                new org.web3j.abi.datatypes.Utf8String(_tranHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static SCTraceabilityV2 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SCTraceabilityV2(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SCTraceabilityV2 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SCTraceabilityV2(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SCTraceabilityV2 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SCTraceabilityV2(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SCTraceabilityV2 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SCTraceabilityV2(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SCTraceabilityV2> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SCTraceabilityV2.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SCTraceabilityV2> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SCTraceabilityV2.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<SCTraceabilityV2> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(SCTraceabilityV2.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SCTraceabilityV2> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SCTraceabilityV2.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class TransactionEventEventResponse extends BaseEventResponse {
        public String _from;

        public String _id;
    }
}
